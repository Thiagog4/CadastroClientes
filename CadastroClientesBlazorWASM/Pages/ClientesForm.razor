@page "/ClientesForm"
@inject HttpClient http
@inject IDialogService DialogService
@inject Validacoes validacoes



<h4>Formulario</h4>
<p>Ao clilcar no botao, voce troca os componentes que estou usando de uma biblioteca para os componentes nativos do BLAZOR</p>
<button class="btn btn-primary mt-5 mb-5" @onclick="switchScreenType">Trocar</button>
@if(switchScreen == true)
{
    <EditForm Model="clientes" OnValidSubmit="handleSendClient">
    <DataAnnotationsValidator />
    <label>CPF</label>
    <input type="number" @bind-value:event="oninput"  class="form-control"  @bind-value="clientes.Cpf" />
    <ValidationMessage For="() => clientes.Cpf" />

    <label>Nome</label>
    <input class="form-control" @bind-value="clientes.Nome" />
    <ValidationMessage For="() => clientes.Nome" />

    <label>CEP</label>
     <input type="number" @bind-value:event="oninput" class="form-control" @bind-value="clientes.Cep" />
    <ValidationMessage For="() => clientes.Cep" />

    <label>Endereço</label>
    <input class="form-control" @bind-value="clientes.Endereco" />
    <ValidationMessage For="() => clientes.Endereco" />
    <label>Numero</label>
    <input class="form-control" @bind-value="clientes.Numero" />
    <ValidationMessage For="() => clientes.Numero" />

    <label>Complemento</label>
        <input class="form-control" @bind-value="clientes.Complemento" />
    <ValidationMessage For="() => clientes.Complemento" />

    <label>E-mail</label>
        <input class="form-control" @bind-value="clientes.Email" />
    <ValidationMessage For="() => clientes.Email" />

    <label>Celular</label>
        <input type="number" @bind-value:event="oninput" class="form-control" @bind-value="clientes.Celular" />
    <ValidationMessage For="() => clientes.Celular" />

    <label>Estado Civil</label>
    <input class="form-control" @bind-value="clientes.EstadoCivil" />
    <ValidationMessage For="() => clientes.EstadoCivil" />

    <button type="submit" class="btn btn-primary mt-5">Cadastrar</button>

</EditForm>
}
else
{
    <EditForm Model="clientes" OnValidSubmit="handleSendClient">
        <DataAnnotationsValidator />

        <MudSwitch Label="Verificar CPF?" @bind-Checked="@Basic_Switch1" Color="Color.Primary" />
        @if(Basic_Switch1)
        {
            <MudTextField TextChanged="OnVerificaCpf" Label="CPF" For="@(() => clientes.Cpf)" Value="clientes.Cpf" />
        }
        else
        {
            <MudTextField  Label="CPF" For="@(() => clientes.Cpf)" @bind-Value="clientes.Cpf" />
        }


        
        

        <MudTextField Label="Nome" For="@(() => clientes.Nome)" @bind-Value="clientes.Nome" />

        <MudTextField For="@(() => clientes.Cep)" Label="Cep" @bind-Value="clientes.Cep"/>

        <MudTextField Label="Endereco" For="@(() => clientes.Endereco)" @bind-Value="clientes.Endereco" />

        <MudTextField Label="Numero" For="@(() => clientes.Numero)" @bind-Value="clientes.Numero" />

        <MudTextField Label="Complemento" For="@(() => clientes.Complemento)" @bind-Value="clientes.Complemento" />


        <MudTextField Label="Email" For="@(() => clientes.Email)" @bind-Value="clientes.Email" />



        <MudTextField Label="Celular" For="@(() => clientes.Celular)" @bind-Value="clientes.Celular" />



        <MudTextField Label="EstadoCivil" For="@(() => clientes.EstadoCivil)" @bind-Value="clientes.EstadoCivil" />


        <button type="submit" class="btn btn-primary mt-5">Cadastrar</button>
    </EditForm>
}


@code {


    //Configuracao para o Component DialogAlert
    async Task ConfigAlerta(string texto, string btntexto1, Color color)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", texto);
        parameters.Add("ButtonText", btntexto1);
        parameters.Add("Color", color);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DialogAlert>("Alerta!", parameters, options);
    }


    public Clientes clientes { get; set; } = new();
    
    public bool Basic_Switch1 { get; set; } = false;

    public bool switchScreen { get; set; } = false;
    


    // disparado para enviar o cliente para a api's 
    private async void handleSendClient()
    {
        var ret = await http.PostAsJsonAsync<Clientes>("https://apiclientesapi.azure-api.net/v1/api/DadosClientes1/", clientes);
        if (ret.IsSuccessStatusCode)
        {
            await ConfigAlerta("Cadastrado com sucesso", "OK", Color.Success);
            clientes = new();
            StateHasChanged();

        }
        else
        {
            await ConfigAlerta("Erro ao cadastrar", "OK", Color.Error);
        }
    }


    //disparado para verificacao do cpf
    async Task OnVerificaCpf(string cpf)
    {
        if (!String.IsNullOrEmpty(cpf))
        {
            clientes.Cpf = cpf;


            // Valida o CPF
            if (validacoes.ValidaCPF(cpf) == false)
            {
                await ConfigAlerta("Digite um cpf valido", "OK", Color.Dark);
            }
        }
        else
        {

            await ConfigAlerta("Digite um CPF", "OK", Color.Dark);
        }
    }


    //muda a tela para os formatos dos inputs
    private void switchScreenType()
    {
        if (switchScreen)
        {
            switchScreen = false;
            StateHasChanged();
        }
        else
        {
            switchScreen = true;
            StateHasChanged();
        }
    }
}
