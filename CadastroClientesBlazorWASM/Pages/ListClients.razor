@page "/AllClients"
@inject HttpClient Http

@inject IDialogService DialogService


<MudTable Items="@clientes" Dense="false" Hover="true" Bordered="false" Striped="true"  Filter="new Func<Clientes,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Clientes</MudText>
        <MudTextField @bind-Value="searchString1" Placeholder="Digite Nome ou CPF" Adornment="Adornment.Start"  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>CPF</MudTh>
        <MudTh>Editar</MudTh>
        <MudTh>Excluir</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Nome</MudTd>
        <MudTd DataLabel="CPF">@context.Cpf</MudTd>
        <MudTd DataLabel="Editar"><MudButton OnClick="()=>EditClient(context.Id)" Variant="Variant.Filled" StartIcon="@Icons.Filled.Edit" Color="Color.Warning">Edit</MudButton></MudTd>
        <MudTd DataLabel="Excluir"><MudButton OnClick="()=>DeleteClient(context.Id)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton></MudTd>
    </RowTemplate>
</MudTable>


<MudDialog @bind-IsVisible="visible" Options="dialogOptions" DisableSidePadding="true">
    <DialogContent>
        <h4>Dados Cadastro</h4>
        <MudContainer>
            <EditForm Model="clienteone" OnValidSubmit="handleSendClient">
                <DataAnnotationsValidator />

                <MudTextField Label="CPF" @bind-Value="clienteone.Cpf" />
                <ValidationMessage For="() => clienteone.Cpf" />


                <MudTextField Label="Nome" @bind-Value="clienteone.Nome" />
                <ValidationMessage For="() => clienteone.Nome" />


                <MudTextField Label="Cep" @bind-Value="clienteone.Cep" />
                <ValidationMessage For="() => clienteone.Cep" />


                <MudTextField Label="Endereco" @bind-Value="clienteone.Endereco" />
                <ValidationMessage For="() => clienteone.Endereco" />


                <MudTextField Label="Numero" @bind-Value="clienteone.Numero" />
                <ValidationMessage For="() => clienteone.Numero" />


                <MudTextField Label="Complemento" @bind-Value="clienteone.Complemento" />
                <ValidationMessage For="() => clienteone.Complemento" />


                <MudTextField Label="Email" @bind-Value="clienteone.Email" />
                <ValidationMessage For="() => clienteone.Email" />


                <MudTextField Label="Celular" @bind-Value="clienteone.Celular" />
                <ValidationMessage For="() => clienteone.Celular" />


                <MudTextField Label="EstadoCivil" @bind-Value="clienteone.EstadoCivil" />
                <ValidationMessage For="() => clienteone.EstadoCivil" />

                <button type="submit" class="btn btn-primary mt-5">Atualizar</button>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>




@code {

    
    //config do dialog-inline
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Medium, CloseButton = true };
    //inicializacoes e variaveis
    private Clientes selectedItem1 = null;
    private string searchString1 = "";
    public IEnumerable<Clientes> clientes { get; set; } = new List<Clientes>();
    private HashSet<Clientes> selectedItems = new HashSet<Clientes>();
    public Clientes clienteone { get; set; } = new Clientes();
    private bool visible;


    // dispara a pesquisa na tabela pesquisa
    private bool FilterFunc1(Clientes element) => FilterFunc(element, searchString1);
    private bool FilterFunc(Clientes element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cpf.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }



    //conf do alerta
    async Task ConfigAlerta(string texto, string btntexto1, Color color)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", texto);
        parameters.Add("ButtonText", btntexto1);
        parameters.Add("Color", color);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DialogAlert>("Alerta!", parameters, options);
    }
    //qundo inicia a pagina
    protected override async Task OnInitializedAsync()
    {
        await GetClients();
    }


    //busca api de clientes
    async Task GetClients()
    {
        clientes = await Http.GetFromJsonAsync<List<Clientes>>("https://apiclientesapi.azure-api.net/v1/api/DadosClientes1/");

    }


    //busca api de UM cliente
    async Task GetClientOne(int id)
    {
        clienteone = await Http.GetFromJsonAsync<Clientes>("https://apiclientesapi.azure-api.net/v1/api/DadosClientes1/" + id);
    }

    //deleta os cliente na api
    async void DeleteClient(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
           "Cuidado!",
           "Deseja excluir o cadastro?",
           yesText: "Delete!", cancelText: "Cancel");

        if (result == true)
        {
            var resp = await Http.DeleteAsync("https://apiclientesapi.azure-api.net/v1/api/DadosClientes1/" + id);
            if (resp.IsSuccessStatusCode)
            {
                ConfigAlerta("Excluido com sucesso", "OK", Color.Success);
                await GetClients();
                StateHasChanged();
            }
            else
            {
                ConfigAlerta("Erro ao excluir", "OK", Color.Error);
            }
        }
    }

    //abre o dialog 
    async void EditClient(int id)
    {
        await GetClientOne(id);
        visible = true;
        StateHasChanged();
    }
    //envio o put para edicao do cliente
    async void handleSendClient()
    {
        var resp =  await Http.PutAsJsonAsync<Clientes>("https://apiclientesapi.azure-api.net/v1/api/DadosClientes1/" + clienteone.Id,clienteone);
        if(resp.IsSuccessStatusCode)
        {
            ConfigAlerta("Alterado com sucesso", "OK", Color.Success);
            visible = false;
            StateHasChanged();
        }
        else
        {
            ConfigAlerta("Erro ao alterar", "OK", Color.Error);
        }
    }
}
